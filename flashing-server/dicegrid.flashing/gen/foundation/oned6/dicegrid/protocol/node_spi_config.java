// Generated by jextract

package foundation.oned6.dicegrid.protocol;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct node_spi_config {
 *     enum {
 *         SPI_SIDE_1 = 1,
 *         SPI_SIDE_2 = 2
 *     } spi_attiny;
 *     uint8_t ss_attiny;
 *     uint8_t rst_attiny;
 *     uint8_t shutdown_pin;
 *     uint8_t engaged_pin;
 * }
 * }
 */
class node_spi_config {

    node_spi_config() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        protocol_h.C_INT.withName("spi_attiny"),
        protocol_h.C_CHAR.withName("ss_attiny"),
        protocol_h.C_CHAR.withName("rst_attiny"),
        protocol_h.C_CHAR.withName("shutdown_pin"),
        protocol_h.C_CHAR.withName("engaged_pin")
    ).withName("node_spi_config");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt spi_attiny$LAYOUT = (OfInt)$LAYOUT.select(groupElement("spi_attiny"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum {
     *     SPI_SIDE_1 = 1,
     *     SPI_SIDE_2 = 2
     * } spi_attiny
     * }
     */
    public static final OfInt spi_attiny$layout() {
        return spi_attiny$LAYOUT;
    }

    private static final long spi_attiny$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum {
     *     SPI_SIDE_1 = 1,
     *     SPI_SIDE_2 = 2
     * } spi_attiny
     * }
     */
    public static final long spi_attiny$offset() {
        return spi_attiny$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum {
     *     SPI_SIDE_1 = 1,
     *     SPI_SIDE_2 = 2
     * } spi_attiny
     * }
     */
    public static int spi_attiny(MemorySegment struct) {
        return struct.get(spi_attiny$LAYOUT, spi_attiny$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum {
     *     SPI_SIDE_1 = 1,
     *     SPI_SIDE_2 = 2
     * } spi_attiny
     * }
     */
    public static void spi_attiny(MemorySegment struct, int fieldValue) {
        struct.set(spi_attiny$LAYOUT, spi_attiny$OFFSET, fieldValue);
    }

    private static final OfByte ss_attiny$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ss_attiny"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t ss_attiny
     * }
     */
    public static final OfByte ss_attiny$layout() {
        return ss_attiny$LAYOUT;
    }

    private static final long ss_attiny$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t ss_attiny
     * }
     */
    public static final long ss_attiny$offset() {
        return ss_attiny$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t ss_attiny
     * }
     */
    public static byte ss_attiny(MemorySegment struct) {
        return struct.get(ss_attiny$LAYOUT, ss_attiny$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t ss_attiny
     * }
     */
    public static void ss_attiny(MemorySegment struct, byte fieldValue) {
        struct.set(ss_attiny$LAYOUT, ss_attiny$OFFSET, fieldValue);
    }

    private static final OfByte rst_attiny$LAYOUT = (OfByte)$LAYOUT.select(groupElement("rst_attiny"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t rst_attiny
     * }
     */
    public static final OfByte rst_attiny$layout() {
        return rst_attiny$LAYOUT;
    }

    private static final long rst_attiny$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t rst_attiny
     * }
     */
    public static final long rst_attiny$offset() {
        return rst_attiny$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t rst_attiny
     * }
     */
    public static byte rst_attiny(MemorySegment struct) {
        return struct.get(rst_attiny$LAYOUT, rst_attiny$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t rst_attiny
     * }
     */
    public static void rst_attiny(MemorySegment struct, byte fieldValue) {
        struct.set(rst_attiny$LAYOUT, rst_attiny$OFFSET, fieldValue);
    }

    private static final OfByte shutdown_pin$LAYOUT = (OfByte)$LAYOUT.select(groupElement("shutdown_pin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t shutdown_pin
     * }
     */
    public static final OfByte shutdown_pin$layout() {
        return shutdown_pin$LAYOUT;
    }

    private static final long shutdown_pin$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t shutdown_pin
     * }
     */
    public static final long shutdown_pin$offset() {
        return shutdown_pin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t shutdown_pin
     * }
     */
    public static byte shutdown_pin(MemorySegment struct) {
        return struct.get(shutdown_pin$LAYOUT, shutdown_pin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t shutdown_pin
     * }
     */
    public static void shutdown_pin(MemorySegment struct, byte fieldValue) {
        struct.set(shutdown_pin$LAYOUT, shutdown_pin$OFFSET, fieldValue);
    }

    private static final OfByte engaged_pin$LAYOUT = (OfByte)$LAYOUT.select(groupElement("engaged_pin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t engaged_pin
     * }
     */
    public static final OfByte engaged_pin$layout() {
        return engaged_pin$LAYOUT;
    }

    private static final long engaged_pin$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t engaged_pin
     * }
     */
    public static final long engaged_pin$offset() {
        return engaged_pin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t engaged_pin
     * }
     */
    public static byte engaged_pin(MemorySegment struct) {
        return struct.get(engaged_pin$LAYOUT, engaged_pin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t engaged_pin
     * }
     */
    public static void engaged_pin(MemorySegment struct, byte fieldValue) {
        struct.set(engaged_pin$LAYOUT, engaged_pin$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

