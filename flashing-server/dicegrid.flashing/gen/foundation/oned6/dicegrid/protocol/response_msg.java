// Generated by jextract

package foundation.oned6.dicegrid.protocol;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct response_msg {
 *     enum message_type type;
 *     bool ok;
 *     union {
 *         struct {
 *         } flash_begin;
 *         struct {
 *         } flash_data;
 *         struct {
 *         } flash_data_end;
 *         struct {
 *         } configure_shutdown;
 *         struct {
 *         } configure_engagement;
 *         struct device_info scan;
 *         struct info_state {
 *             uint8_t node_idx;
 *             struct node_info info;
 *             struct node_state state;
 *         } info_and_state;
 *         struct {
 *         } set_node_info;
 *     };
 * }
 * }
 */
class response_msg {

    response_msg() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        protocol_h.C_INT.withName("type"),
        protocol_h.C_BOOL.withName("ok"),
        MemoryLayout.paddingLayout(3),
        MemoryLayout.unionLayout(
            response_msg.flash_begin.layout().withName("flash_begin"),
            response_msg.flash_data.layout().withName("flash_data"),
            response_msg.flash_data_end.layout().withName("flash_data_end"),
            response_msg.configure_shutdown.layout().withName("configure_shutdown"),
            response_msg.configure_engagement.layout().withName("configure_engagement"),
            device_info.layout().withName("scan"),
            response_msg.info_state.layout().withName("info_and_state"),
            response_msg.set_node_info.layout().withName("set_node_info")
        ).withName("$anon$120:5")
    ).withName("response_msg");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum message_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum message_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum message_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum message_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfBoolean ok$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ok"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ok
     * }
     */
    public static final OfBoolean ok$layout() {
        return ok$LAYOUT;
    }

    private static final long ok$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ok
     * }
     */
    public static final long ok$offset() {
        return ok$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ok
     * }
     */
    public static boolean ok(MemorySegment struct) {
        return struct.get(ok$LAYOUT, ok$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ok
     * }
     */
    public static void ok(MemorySegment struct, boolean fieldValue) {
        struct.set(ok$LAYOUT, ok$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     * }
     * }
     */
    public static class flash_begin {

        flash_begin() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(

        ).withName("$anon$121:9");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout flash_begin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$120:5"), groupElement("flash_begin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     * } flash_begin
     * }
     */
    public static final GroupLayout flash_begin$layout() {
        return flash_begin$LAYOUT;
    }

    private static final long flash_begin$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     * } flash_begin
     * }
     */
    public static final long flash_begin$offset() {
        return flash_begin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     * } flash_begin
     * }
     */
    public static MemorySegment flash_begin(MemorySegment struct) {
        return struct.asSlice(flash_begin$OFFSET, flash_begin$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     * } flash_begin
     * }
     */
    public static void flash_begin(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flash_begin$OFFSET, flash_begin$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     * }
     * }
     */
    public static class flash_data {

        flash_data() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(

        ).withName("$anon$122:9");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout flash_data$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$120:5"), groupElement("flash_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     * } flash_data
     * }
     */
    public static final GroupLayout flash_data$layout() {
        return flash_data$LAYOUT;
    }

    private static final long flash_data$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     * } flash_data
     * }
     */
    public static final long flash_data$offset() {
        return flash_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     * } flash_data
     * }
     */
    public static MemorySegment flash_data(MemorySegment struct) {
        return struct.asSlice(flash_data$OFFSET, flash_data$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     * } flash_data
     * }
     */
    public static void flash_data(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flash_data$OFFSET, flash_data$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     * }
     * }
     */
    public static class flash_data_end {

        flash_data_end() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(

        ).withName("$anon$123:9");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout flash_data_end$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$120:5"), groupElement("flash_data_end"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     * } flash_data_end
     * }
     */
    public static final GroupLayout flash_data_end$layout() {
        return flash_data_end$LAYOUT;
    }

    private static final long flash_data_end$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     * } flash_data_end
     * }
     */
    public static final long flash_data_end$offset() {
        return flash_data_end$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     * } flash_data_end
     * }
     */
    public static MemorySegment flash_data_end(MemorySegment struct) {
        return struct.asSlice(flash_data_end$OFFSET, flash_data_end$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     * } flash_data_end
     * }
     */
    public static void flash_data_end(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flash_data_end$OFFSET, flash_data_end$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     * }
     * }
     */
    public static class configure_shutdown {

        configure_shutdown() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(

        ).withName("$anon$124:9");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout configure_shutdown$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$120:5"), groupElement("configure_shutdown"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     * } configure_shutdown
     * }
     */
    public static final GroupLayout configure_shutdown$layout() {
        return configure_shutdown$LAYOUT;
    }

    private static final long configure_shutdown$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     * } configure_shutdown
     * }
     */
    public static final long configure_shutdown$offset() {
        return configure_shutdown$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     * } configure_shutdown
     * }
     */
    public static MemorySegment configure_shutdown(MemorySegment struct) {
        return struct.asSlice(configure_shutdown$OFFSET, configure_shutdown$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     * } configure_shutdown
     * }
     */
    public static void configure_shutdown(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, configure_shutdown$OFFSET, configure_shutdown$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     * }
     * }
     */
    public static class configure_engagement {

        configure_engagement() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(

        ).withName("$anon$125:9");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout configure_engagement$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$120:5"), groupElement("configure_engagement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     * } configure_engagement
     * }
     */
    public static final GroupLayout configure_engagement$layout() {
        return configure_engagement$LAYOUT;
    }

    private static final long configure_engagement$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     * } configure_engagement
     * }
     */
    public static final long configure_engagement$offset() {
        return configure_engagement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     * } configure_engagement
     * }
     */
    public static MemorySegment configure_engagement(MemorySegment struct) {
        return struct.asSlice(configure_engagement$OFFSET, configure_engagement$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     * } configure_engagement
     * }
     */
    public static void configure_engagement(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, configure_engagement$OFFSET, configure_engagement$LAYOUT.byteSize());
    }

    private static final GroupLayout scan$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$120:5"), groupElement("scan"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct device_info scan
     * }
     */
    public static final GroupLayout scan$layout() {
        return scan$LAYOUT;
    }

    private static final long scan$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct device_info scan
     * }
     */
    public static final long scan$offset() {
        return scan$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct device_info scan
     * }
     */
    public static MemorySegment scan(MemorySegment struct) {
        return struct.asSlice(scan$OFFSET, scan$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct device_info scan
     * }
     */
    public static void scan(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, scan$OFFSET, scan$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct info_state {
     *     uint8_t node_idx;
     *     struct node_info info;
     *     struct node_state state;
     * }
     * }
     */
    public static class info_state {

        info_state() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            protocol_h.C_CHAR.withName("node_idx"),
            MemoryLayout.paddingLayout(3),
            node_info.layout().withName("info"),
            MemoryLayout.paddingLayout(4),
            node_state.layout().withName("state")
        ).withName("info_state");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfByte node_idx$LAYOUT = (OfByte)$LAYOUT.select(groupElement("node_idx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t node_idx
         * }
         */
        public static final OfByte node_idx$layout() {
            return node_idx$LAYOUT;
        }

        private static final long node_idx$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t node_idx
         * }
         */
        public static final long node_idx$offset() {
            return node_idx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t node_idx
         * }
         */
        public static byte node_idx(MemorySegment struct) {
            return struct.get(node_idx$LAYOUT, node_idx$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t node_idx
         * }
         */
        public static void node_idx(MemorySegment struct, byte fieldValue) {
            struct.set(node_idx$LAYOUT, node_idx$OFFSET, fieldValue);
        }

        private static final GroupLayout info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("info"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct node_info info
         * }
         */
        public static final GroupLayout info$layout() {
            return info$LAYOUT;
        }

        private static final long info$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct node_info info
         * }
         */
        public static final long info$offset() {
            return info$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct node_info info
         * }
         */
        public static MemorySegment info(MemorySegment struct) {
            return struct.asSlice(info$OFFSET, info$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct node_info info
         * }
         */
        public static void info(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, info$OFFSET, info$LAYOUT.byteSize());
        }

        private static final GroupLayout state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("state"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct node_state state
         * }
         */
        public static final GroupLayout state$layout() {
            return state$LAYOUT;
        }

        private static final long state$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct node_state state
         * }
         */
        public static final long state$offset() {
            return state$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct node_state state
         * }
         */
        public static MemorySegment state(MemorySegment struct) {
            return struct.asSlice(state$OFFSET, state$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct node_state state
         * }
         */
        public static void state(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, state$OFFSET, state$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout info_and_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$120:5"), groupElement("info_and_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct info_state info_and_state
     * }
     */
    public static final GroupLayout info_and_state$layout() {
        return info_and_state$LAYOUT;
    }

    private static final long info_and_state$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct info_state info_and_state
     * }
     */
    public static final long info_and_state$offset() {
        return info_and_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct info_state info_and_state
     * }
     */
    public static MemorySegment info_and_state(MemorySegment struct) {
        return struct.asSlice(info_and_state$OFFSET, info_and_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct info_state info_and_state
     * }
     */
    public static void info_and_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, info_and_state$OFFSET, info_and_state$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     * }
     * }
     */
    public static class set_node_info {

        set_node_info() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(

        ).withName("$anon$132:3");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout set_node_info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$120:5"), groupElement("set_node_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     * } set_node_info
     * }
     */
    public static final GroupLayout set_node_info$layout() {
        return set_node_info$LAYOUT;
    }

    private static final long set_node_info$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     * } set_node_info
     * }
     */
    public static final long set_node_info$offset() {
        return set_node_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     * } set_node_info
     * }
     */
    public static MemorySegment set_node_info(MemorySegment struct) {
        return struct.asSlice(set_node_info$OFFSET, set_node_info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     * } set_node_info
     * }
     */
    public static void set_node_info(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, set_node_info$OFFSET, set_node_info$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

