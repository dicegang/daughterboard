// Generated by jextract

package foundation.oned6.dicegrid.protocol;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct response_msg {
 *     enum {
 *         RES_FLASH_ATTINY,
 *         RES_CONFIGURE_SHUTDOWN,
 *         RES_CONFIGURE_ENGAGEMENT,
 *         RES_SCAN,
 *         RES_NODE_STATE
 *     } type;
 *     bool ok;
 *     union {
 *         struct {
 *         } flash_attiny;
 *         struct {
 *         } configure_shutdown;
 *         struct {
 *         } configure_engagement;
 *         struct device_info scan;
 *         struct node_state node_state;
 *     };
 * }
 * }
 */
class response_msg {

    response_msg() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        protocol_h.C_INT.withName("type"),
        protocol_h.C_BOOL.withName("ok"),
        MemoryLayout.paddingLayout(3),
        MemoryLayout.unionLayout(
            response_msg.flash_attiny.layout().withName("flash_attiny"),
            response_msg.configure_shutdown.layout().withName("configure_shutdown"),
            response_msg.configure_engagement.layout().withName("configure_engagement"),
            device_info.layout().withName("scan"),
            node_state.layout().withName("node_state")
        ).withName("$anon$81:5")
    ).withName("response_msg");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum {
     *     RES_FLASH_ATTINY,
     *     RES_CONFIGURE_SHUTDOWN,
     *     RES_CONFIGURE_ENGAGEMENT,
     *     RES_SCAN,
     *     RES_NODE_STATE
     * } type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum {
     *     RES_FLASH_ATTINY,
     *     RES_CONFIGURE_SHUTDOWN,
     *     RES_CONFIGURE_ENGAGEMENT,
     *     RES_SCAN,
     *     RES_NODE_STATE
     * } type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum {
     *     RES_FLASH_ATTINY,
     *     RES_CONFIGURE_SHUTDOWN,
     *     RES_CONFIGURE_ENGAGEMENT,
     *     RES_SCAN,
     *     RES_NODE_STATE
     * } type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum {
     *     RES_FLASH_ATTINY,
     *     RES_CONFIGURE_SHUTDOWN,
     *     RES_CONFIGURE_ENGAGEMENT,
     *     RES_SCAN,
     *     RES_NODE_STATE
     * } type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfBoolean ok$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ok"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ok
     * }
     */
    public static final OfBoolean ok$layout() {
        return ok$LAYOUT;
    }

    private static final long ok$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ok
     * }
     */
    public static final long ok$offset() {
        return ok$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ok
     * }
     */
    public static boolean ok(MemorySegment struct) {
        return struct.get(ok$LAYOUT, ok$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ok
     * }
     */
    public static void ok(MemorySegment struct, boolean fieldValue) {
        struct.set(ok$LAYOUT, ok$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     * }
     * }
     */
    public static class flash_attiny {

        flash_attiny() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(

        ).withName("$anon$82:9");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout flash_attiny$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("flash_attiny"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     * } flash_attiny
     * }
     */
    public static final GroupLayout flash_attiny$layout() {
        return flash_attiny$LAYOUT;
    }

    private static final long flash_attiny$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     * } flash_attiny
     * }
     */
    public static final long flash_attiny$offset() {
        return flash_attiny$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     * } flash_attiny
     * }
     */
    public static MemorySegment flash_attiny(MemorySegment struct) {
        return struct.asSlice(flash_attiny$OFFSET, flash_attiny$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     * } flash_attiny
     * }
     */
    public static void flash_attiny(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flash_attiny$OFFSET, flash_attiny$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     * }
     * }
     */
    public static class configure_shutdown {

        configure_shutdown() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(

        ).withName("$anon$83:9");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout configure_shutdown$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("configure_shutdown"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     * } configure_shutdown
     * }
     */
    public static final GroupLayout configure_shutdown$layout() {
        return configure_shutdown$LAYOUT;
    }

    private static final long configure_shutdown$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     * } configure_shutdown
     * }
     */
    public static final long configure_shutdown$offset() {
        return configure_shutdown$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     * } configure_shutdown
     * }
     */
    public static MemorySegment configure_shutdown(MemorySegment struct) {
        return struct.asSlice(configure_shutdown$OFFSET, configure_shutdown$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     * } configure_shutdown
     * }
     */
    public static void configure_shutdown(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, configure_shutdown$OFFSET, configure_shutdown$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     * }
     * }
     */
    public static class configure_engagement {

        configure_engagement() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(

        ).withName("$anon$84:9");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout configure_engagement$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("configure_engagement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     * } configure_engagement
     * }
     */
    public static final GroupLayout configure_engagement$layout() {
        return configure_engagement$LAYOUT;
    }

    private static final long configure_engagement$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     * } configure_engagement
     * }
     */
    public static final long configure_engagement$offset() {
        return configure_engagement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     * } configure_engagement
     * }
     */
    public static MemorySegment configure_engagement(MemorySegment struct) {
        return struct.asSlice(configure_engagement$OFFSET, configure_engagement$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     * } configure_engagement
     * }
     */
    public static void configure_engagement(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, configure_engagement$OFFSET, configure_engagement$LAYOUT.byteSize());
    }

    private static final GroupLayout scan$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("scan"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct device_info scan
     * }
     */
    public static final GroupLayout scan$layout() {
        return scan$LAYOUT;
    }

    private static final long scan$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct device_info scan
     * }
     */
    public static final long scan$offset() {
        return scan$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct device_info scan
     * }
     */
    public static MemorySegment scan(MemorySegment struct) {
        return struct.asSlice(scan$OFFSET, scan$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct device_info scan
     * }
     */
    public static void scan(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, scan$OFFSET, scan$LAYOUT.byteSize());
    }

    private static final GroupLayout node_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("node_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct node_state node_state
     * }
     */
    public static final GroupLayout node_state$layout() {
        return node_state$LAYOUT;
    }

    private static final long node_state$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct node_state node_state
     * }
     */
    public static final long node_state$offset() {
        return node_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct node_state node_state
     * }
     */
    public static MemorySegment node_state(MemorySegment struct) {
        return struct.asSlice(node_state$OFFSET, node_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct node_state node_state
     * }
     */
    public static void node_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, node_state$OFFSET, node_state$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

