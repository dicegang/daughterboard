// Generated by jextract

package foundation.oned6.dicegrid.protocol;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct node_configuration {
 *     struct {
 *         bool connected;
 *         struct bitbang_spi_config spi_config;
 *         struct node_info info;
 *     } nodes[4];
 * }
 * }
 */
class node_configuration {

    node_configuration() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, node_configuration.nodes.layout()).withName("nodes")
    ).withName("node_configuration");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     bool connected;
     *     struct bitbang_spi_config spi_config;
     *     struct node_info info;
     * }
     * }
     */
    public static class nodes {

        nodes() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            protocol_h.C_BOOL.withName("connected"),
            MemoryLayout.paddingLayout(3),
            bitbang_spi_config.layout().withName("spi_config"),
            node_info.layout().withName("info")
        ).withName("$anon$52:2");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfBoolean connected$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("connected"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * bool connected
         * }
         */
        public static final OfBoolean connected$layout() {
            return connected$LAYOUT;
        }

        private static final long connected$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * bool connected
         * }
         */
        public static final long connected$offset() {
            return connected$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * bool connected
         * }
         */
        public static boolean connected(MemorySegment struct) {
            return struct.get(connected$LAYOUT, connected$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * bool connected
         * }
         */
        public static void connected(MemorySegment struct, boolean fieldValue) {
            struct.set(connected$LAYOUT, connected$OFFSET, fieldValue);
        }

        private static final GroupLayout spi_config$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("spi_config"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct bitbang_spi_config spi_config
         * }
         */
        public static final GroupLayout spi_config$layout() {
            return spi_config$LAYOUT;
        }

        private static final long spi_config$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct bitbang_spi_config spi_config
         * }
         */
        public static final long spi_config$offset() {
            return spi_config$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct bitbang_spi_config spi_config
         * }
         */
        public static MemorySegment spi_config(MemorySegment struct) {
            return struct.asSlice(spi_config$OFFSET, spi_config$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct bitbang_spi_config spi_config
         * }
         */
        public static void spi_config(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, spi_config$OFFSET, spi_config$LAYOUT.byteSize());
        }

        private static final GroupLayout info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("info"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct node_info info
         * }
         */
        public static final GroupLayout info$layout() {
            return info$LAYOUT;
        }

        private static final long info$OFFSET = 12;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct node_info info
         * }
         */
        public static final long info$offset() {
            return info$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct node_info info
         * }
         */
        public static MemorySegment info(MemorySegment struct) {
            return struct.asSlice(info$OFFSET, info$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct node_info info
         * }
         */
        public static void info(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, info$OFFSET, info$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final SequenceLayout nodes$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("nodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     bool connected;
     *     struct bitbang_spi_config spi_config;
     *     struct node_info info;
     * } nodes[4]
     * }
     */
    public static final SequenceLayout nodes$layout() {
        return nodes$LAYOUT;
    }

    private static final long nodes$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     bool connected;
     *     struct bitbang_spi_config spi_config;
     *     struct node_info info;
     * } nodes[4]
     * }
     */
    public static final long nodes$offset() {
        return nodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     bool connected;
     *     struct bitbang_spi_config spi_config;
     *     struct node_info info;
     * } nodes[4]
     * }
     */
    public static MemorySegment nodes(MemorySegment struct) {
        return struct.asSlice(nodes$OFFSET, nodes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     bool connected;
     *     struct bitbang_spi_config spi_config;
     *     struct node_info info;
     * } nodes[4]
     * }
     */
    public static void nodes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, nodes$OFFSET, nodes$LAYOUT.byteSize());
    }

    private static long[] nodes$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * struct {
     *     bool connected;
     *     struct bitbang_spi_config spi_config;
     *     struct node_info info;
     * } nodes[4]
     * }
     */
    public static long[] nodes$dimensions() {
        return nodes$DIMS;
    }
    private static final MethodHandle nodes$ELEM_HANDLE = nodes$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * struct {
     *     bool connected;
     *     struct bitbang_spi_config spi_config;
     *     struct node_info info;
     * } nodes[4]
     * }
     */
    public static MemorySegment nodes(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)nodes$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * struct {
     *     bool connected;
     *     struct bitbang_spi_config spi_config;
     *     struct node_info info;
     * } nodes[4]
     * }
     */
    public static void nodes(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, nodes(struct, index0), 0L, node_configuration.nodes.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

