// Generated by jextract

package foundation.oned6.dicegrid.protocol;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct node_state {
 *     bool shutdown;
 *     bool engaged;
 *     enum {
 *         TRIP_REASON_NONE,
 *         TRIP_REASON_OVERCURRENT,
 *         TRIP_REASON_OVERVOLTAGE,
 *         TRIP_REASON_ANGLE,
 *         TRIP_REASON_THD,
 *         TRIP_REASON_MANUAL
 *     } trip_reason;
 *     double current_rms_inner;
 *     double current_rms_outer;
 *     double voltage_rms;
 *     double current_freq_inner;
 *     double current_freq_outer;
 *     double voltage_freq;
 *     double phase_angle;
 *     double currents_angle;
 *     double current_thd_inner;
 *     double current_thd_outer;
 *     double voltage_thd;
 * }
 * }
 */
class node_state {

    node_state() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        protocol_h.C_BOOL.withName("shutdown"),
        protocol_h.C_BOOL.withName("engaged"),
        MemoryLayout.paddingLayout(2),
        protocol_h.C_INT.withName("trip_reason"),
        protocol_h.C_DOUBLE.withName("current_rms_inner"),
        protocol_h.C_DOUBLE.withName("current_rms_outer"),
        protocol_h.C_DOUBLE.withName("voltage_rms"),
        protocol_h.C_DOUBLE.withName("current_freq_inner"),
        protocol_h.C_DOUBLE.withName("current_freq_outer"),
        protocol_h.C_DOUBLE.withName("voltage_freq"),
        protocol_h.C_DOUBLE.withName("phase_angle"),
        protocol_h.C_DOUBLE.withName("currents_angle"),
        protocol_h.C_DOUBLE.withName("current_thd_inner"),
        protocol_h.C_DOUBLE.withName("current_thd_outer"),
        protocol_h.C_DOUBLE.withName("voltage_thd")
    ).withName("node_state");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean shutdown$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("shutdown"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool shutdown
     * }
     */
    public static final OfBoolean shutdown$layout() {
        return shutdown$LAYOUT;
    }

    private static final long shutdown$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool shutdown
     * }
     */
    public static final long shutdown$offset() {
        return shutdown$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool shutdown
     * }
     */
    public static boolean shutdown(MemorySegment struct) {
        return struct.get(shutdown$LAYOUT, shutdown$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool shutdown
     * }
     */
    public static void shutdown(MemorySegment struct, boolean fieldValue) {
        struct.set(shutdown$LAYOUT, shutdown$OFFSET, fieldValue);
    }

    private static final OfBoolean engaged$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("engaged"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool engaged
     * }
     */
    public static final OfBoolean engaged$layout() {
        return engaged$LAYOUT;
    }

    private static final long engaged$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool engaged
     * }
     */
    public static final long engaged$offset() {
        return engaged$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool engaged
     * }
     */
    public static boolean engaged(MemorySegment struct) {
        return struct.get(engaged$LAYOUT, engaged$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool engaged
     * }
     */
    public static void engaged(MemorySegment struct, boolean fieldValue) {
        struct.set(engaged$LAYOUT, engaged$OFFSET, fieldValue);
    }

    private static final OfInt trip_reason$LAYOUT = (OfInt)$LAYOUT.select(groupElement("trip_reason"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum {
     *     TRIP_REASON_NONE,
     *     TRIP_REASON_OVERCURRENT,
     *     TRIP_REASON_OVERVOLTAGE,
     *     TRIP_REASON_ANGLE,
     *     TRIP_REASON_THD,
     *     TRIP_REASON_MANUAL
     * } trip_reason
     * }
     */
    public static final OfInt trip_reason$layout() {
        return trip_reason$LAYOUT;
    }

    private static final long trip_reason$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum {
     *     TRIP_REASON_NONE,
     *     TRIP_REASON_OVERCURRENT,
     *     TRIP_REASON_OVERVOLTAGE,
     *     TRIP_REASON_ANGLE,
     *     TRIP_REASON_THD,
     *     TRIP_REASON_MANUAL
     * } trip_reason
     * }
     */
    public static final long trip_reason$offset() {
        return trip_reason$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum {
     *     TRIP_REASON_NONE,
     *     TRIP_REASON_OVERCURRENT,
     *     TRIP_REASON_OVERVOLTAGE,
     *     TRIP_REASON_ANGLE,
     *     TRIP_REASON_THD,
     *     TRIP_REASON_MANUAL
     * } trip_reason
     * }
     */
    public static int trip_reason(MemorySegment struct) {
        return struct.get(trip_reason$LAYOUT, trip_reason$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum {
     *     TRIP_REASON_NONE,
     *     TRIP_REASON_OVERCURRENT,
     *     TRIP_REASON_OVERVOLTAGE,
     *     TRIP_REASON_ANGLE,
     *     TRIP_REASON_THD,
     *     TRIP_REASON_MANUAL
     * } trip_reason
     * }
     */
    public static void trip_reason(MemorySegment struct, int fieldValue) {
        struct.set(trip_reason$LAYOUT, trip_reason$OFFSET, fieldValue);
    }

    private static final OfDouble current_rms_inner$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("current_rms_inner"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double current_rms_inner
     * }
     */
    public static final OfDouble current_rms_inner$layout() {
        return current_rms_inner$LAYOUT;
    }

    private static final long current_rms_inner$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double current_rms_inner
     * }
     */
    public static final long current_rms_inner$offset() {
        return current_rms_inner$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double current_rms_inner
     * }
     */
    public static double current_rms_inner(MemorySegment struct) {
        return struct.get(current_rms_inner$LAYOUT, current_rms_inner$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double current_rms_inner
     * }
     */
    public static void current_rms_inner(MemorySegment struct, double fieldValue) {
        struct.set(current_rms_inner$LAYOUT, current_rms_inner$OFFSET, fieldValue);
    }

    private static final OfDouble current_rms_outer$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("current_rms_outer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double current_rms_outer
     * }
     */
    public static final OfDouble current_rms_outer$layout() {
        return current_rms_outer$LAYOUT;
    }

    private static final long current_rms_outer$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double current_rms_outer
     * }
     */
    public static final long current_rms_outer$offset() {
        return current_rms_outer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double current_rms_outer
     * }
     */
    public static double current_rms_outer(MemorySegment struct) {
        return struct.get(current_rms_outer$LAYOUT, current_rms_outer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double current_rms_outer
     * }
     */
    public static void current_rms_outer(MemorySegment struct, double fieldValue) {
        struct.set(current_rms_outer$LAYOUT, current_rms_outer$OFFSET, fieldValue);
    }

    private static final OfDouble voltage_rms$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("voltage_rms"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double voltage_rms
     * }
     */
    public static final OfDouble voltage_rms$layout() {
        return voltage_rms$LAYOUT;
    }

    private static final long voltage_rms$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double voltage_rms
     * }
     */
    public static final long voltage_rms$offset() {
        return voltage_rms$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double voltage_rms
     * }
     */
    public static double voltage_rms(MemorySegment struct) {
        return struct.get(voltage_rms$LAYOUT, voltage_rms$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double voltage_rms
     * }
     */
    public static void voltage_rms(MemorySegment struct, double fieldValue) {
        struct.set(voltage_rms$LAYOUT, voltage_rms$OFFSET, fieldValue);
    }

    private static final OfDouble current_freq_inner$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("current_freq_inner"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double current_freq_inner
     * }
     */
    public static final OfDouble current_freq_inner$layout() {
        return current_freq_inner$LAYOUT;
    }

    private static final long current_freq_inner$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double current_freq_inner
     * }
     */
    public static final long current_freq_inner$offset() {
        return current_freq_inner$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double current_freq_inner
     * }
     */
    public static double current_freq_inner(MemorySegment struct) {
        return struct.get(current_freq_inner$LAYOUT, current_freq_inner$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double current_freq_inner
     * }
     */
    public static void current_freq_inner(MemorySegment struct, double fieldValue) {
        struct.set(current_freq_inner$LAYOUT, current_freq_inner$OFFSET, fieldValue);
    }

    private static final OfDouble current_freq_outer$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("current_freq_outer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double current_freq_outer
     * }
     */
    public static final OfDouble current_freq_outer$layout() {
        return current_freq_outer$LAYOUT;
    }

    private static final long current_freq_outer$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double current_freq_outer
     * }
     */
    public static final long current_freq_outer$offset() {
        return current_freq_outer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double current_freq_outer
     * }
     */
    public static double current_freq_outer(MemorySegment struct) {
        return struct.get(current_freq_outer$LAYOUT, current_freq_outer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double current_freq_outer
     * }
     */
    public static void current_freq_outer(MemorySegment struct, double fieldValue) {
        struct.set(current_freq_outer$LAYOUT, current_freq_outer$OFFSET, fieldValue);
    }

    private static final OfDouble voltage_freq$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("voltage_freq"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double voltage_freq
     * }
     */
    public static final OfDouble voltage_freq$layout() {
        return voltage_freq$LAYOUT;
    }

    private static final long voltage_freq$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double voltage_freq
     * }
     */
    public static final long voltage_freq$offset() {
        return voltage_freq$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double voltage_freq
     * }
     */
    public static double voltage_freq(MemorySegment struct) {
        return struct.get(voltage_freq$LAYOUT, voltage_freq$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double voltage_freq
     * }
     */
    public static void voltage_freq(MemorySegment struct, double fieldValue) {
        struct.set(voltage_freq$LAYOUT, voltage_freq$OFFSET, fieldValue);
    }

    private static final OfDouble phase_angle$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("phase_angle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double phase_angle
     * }
     */
    public static final OfDouble phase_angle$layout() {
        return phase_angle$LAYOUT;
    }

    private static final long phase_angle$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double phase_angle
     * }
     */
    public static final long phase_angle$offset() {
        return phase_angle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double phase_angle
     * }
     */
    public static double phase_angle(MemorySegment struct) {
        return struct.get(phase_angle$LAYOUT, phase_angle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double phase_angle
     * }
     */
    public static void phase_angle(MemorySegment struct, double fieldValue) {
        struct.set(phase_angle$LAYOUT, phase_angle$OFFSET, fieldValue);
    }

    private static final OfDouble currents_angle$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("currents_angle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double currents_angle
     * }
     */
    public static final OfDouble currents_angle$layout() {
        return currents_angle$LAYOUT;
    }

    private static final long currents_angle$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double currents_angle
     * }
     */
    public static final long currents_angle$offset() {
        return currents_angle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double currents_angle
     * }
     */
    public static double currents_angle(MemorySegment struct) {
        return struct.get(currents_angle$LAYOUT, currents_angle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double currents_angle
     * }
     */
    public static void currents_angle(MemorySegment struct, double fieldValue) {
        struct.set(currents_angle$LAYOUT, currents_angle$OFFSET, fieldValue);
    }

    private static final OfDouble current_thd_inner$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("current_thd_inner"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double current_thd_inner
     * }
     */
    public static final OfDouble current_thd_inner$layout() {
        return current_thd_inner$LAYOUT;
    }

    private static final long current_thd_inner$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double current_thd_inner
     * }
     */
    public static final long current_thd_inner$offset() {
        return current_thd_inner$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double current_thd_inner
     * }
     */
    public static double current_thd_inner(MemorySegment struct) {
        return struct.get(current_thd_inner$LAYOUT, current_thd_inner$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double current_thd_inner
     * }
     */
    public static void current_thd_inner(MemorySegment struct, double fieldValue) {
        struct.set(current_thd_inner$LAYOUT, current_thd_inner$OFFSET, fieldValue);
    }

    private static final OfDouble current_thd_outer$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("current_thd_outer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double current_thd_outer
     * }
     */
    public static final OfDouble current_thd_outer$layout() {
        return current_thd_outer$LAYOUT;
    }

    private static final long current_thd_outer$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double current_thd_outer
     * }
     */
    public static final long current_thd_outer$offset() {
        return current_thd_outer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double current_thd_outer
     * }
     */
    public static double current_thd_outer(MemorySegment struct) {
        return struct.get(current_thd_outer$LAYOUT, current_thd_outer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double current_thd_outer
     * }
     */
    public static void current_thd_outer(MemorySegment struct, double fieldValue) {
        struct.set(current_thd_outer$LAYOUT, current_thd_outer$OFFSET, fieldValue);
    }

    private static final OfDouble voltage_thd$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("voltage_thd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double voltage_thd
     * }
     */
    public static final OfDouble voltage_thd$layout() {
        return voltage_thd$LAYOUT;
    }

    private static final long voltage_thd$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double voltage_thd
     * }
     */
    public static final long voltage_thd$offset() {
        return voltage_thd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double voltage_thd
     * }
     */
    public static double voltage_thd(MemorySegment struct) {
        return struct.get(voltage_thd$LAYOUT, voltage_thd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double voltage_thd
     * }
     */
    public static void voltage_thd(MemorySegment struct, double fieldValue) {
        struct.set(voltage_thd$LAYOUT, voltage_thd$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

