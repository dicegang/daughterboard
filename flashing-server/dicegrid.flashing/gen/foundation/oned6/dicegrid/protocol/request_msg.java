// Generated by jextract

package foundation.oned6.dicegrid.protocol;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct request_msg {
 *     enum message_type type;
 *     union {
 *         struct flash_begin_req {
 *             uint8_t node_id;
 *             uint16_t total_chunks;
 *         } flash_begin;
 *         struct flash_data_req {
 *             uint8_t chunk_idx;
 *             uint8_t crc;
 *             uint16_t chunk_offset;
 *             uint8_t chunk_size;
 *             uint8_t chunk[16];
 *         } flash_data;
 *         struct {
 *         } flash_data_end;
 *         struct cfg_shtdn_req {
 *             uint8_t node_id;
 *             bool shutdown;
 *         } configure_shutdown;
 *         struct cfg_engage_req {
 *             uint8_t node_id;
 *             bool engaged;
 *         } configure_engagement;
 *         struct scan_req {
 *             bool include_states;
 *         } scan;
 *         struct node_state_req {
 *             uint8_t node_id;
 *         } node_state;
 *         struct device_configuration set_node_info;
 *     };
 * }
 * }
 */
class request_msg {

    request_msg() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        protocol_h.C_INT.withName("type"),
        MemoryLayout.unionLayout(
            request_msg.flash_begin_req.layout().withName("flash_begin"),
            request_msg.flash_data_req.layout().withName("flash_data"),
            request_msg.flash_data_end.layout().withName("flash_data_end"),
            request_msg.cfg_shtdn_req.layout().withName("configure_shutdown"),
            request_msg.cfg_engage_req.layout().withName("configure_engagement"),
            request_msg.scan_req.layout().withName("scan"),
            request_msg.node_state_req.layout().withName("node_state"),
            device_configuration.layout().withName("set_node_info")
        ).withName("$anon$81:5")
    ).withName("request_msg");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum message_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum message_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum message_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum message_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct flash_begin_req {
     *     uint8_t node_id;
     *     uint16_t total_chunks;
     * }
     * }
     */
    public static class flash_begin_req {

        flash_begin_req() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            protocol_h.C_CHAR.withName("node_id"),
            MemoryLayout.paddingLayout(1),
            protocol_h.C_SHORT.withName("total_chunks")
        ).withName("flash_begin_req");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfByte node_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("node_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static final OfByte node_id$layout() {
            return node_id$LAYOUT;
        }

        private static final long node_id$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static final long node_id$offset() {
            return node_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static byte node_id(MemorySegment struct) {
            return struct.get(node_id$LAYOUT, node_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static void node_id(MemorySegment struct, byte fieldValue) {
            struct.set(node_id$LAYOUT, node_id$OFFSET, fieldValue);
        }

        private static final OfShort total_chunks$LAYOUT = (OfShort)$LAYOUT.select(groupElement("total_chunks"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint16_t total_chunks
         * }
         */
        public static final OfShort total_chunks$layout() {
            return total_chunks$LAYOUT;
        }

        private static final long total_chunks$OFFSET = 2;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint16_t total_chunks
         * }
         */
        public static final long total_chunks$offset() {
            return total_chunks$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint16_t total_chunks
         * }
         */
        public static short total_chunks(MemorySegment struct) {
            return struct.get(total_chunks$LAYOUT, total_chunks$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint16_t total_chunks
         * }
         */
        public static void total_chunks(MemorySegment struct, short fieldValue) {
            struct.set(total_chunks$LAYOUT, total_chunks$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout flash_begin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("flash_begin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct flash_begin_req flash_begin
     * }
     */
    public static final GroupLayout flash_begin$layout() {
        return flash_begin$LAYOUT;
    }

    private static final long flash_begin$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct flash_begin_req flash_begin
     * }
     */
    public static final long flash_begin$offset() {
        return flash_begin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct flash_begin_req flash_begin
     * }
     */
    public static MemorySegment flash_begin(MemorySegment struct) {
        return struct.asSlice(flash_begin$OFFSET, flash_begin$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct flash_begin_req flash_begin
     * }
     */
    public static void flash_begin(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flash_begin$OFFSET, flash_begin$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct flash_data_req {
     *     uint8_t chunk_idx;
     *     uint8_t crc;
     *     uint16_t chunk_offset;
     *     uint8_t chunk_size;
     *     uint8_t chunk[16];
     * }
     * }
     */
    public static class flash_data_req {

        flash_data_req() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            protocol_h.C_CHAR.withName("chunk_idx"),
            protocol_h.C_CHAR.withName("crc"),
            protocol_h.C_SHORT.withName("chunk_offset"),
            protocol_h.C_CHAR.withName("chunk_size"),
            MemoryLayout.sequenceLayout(16, protocol_h.C_CHAR).withName("chunk"),
            MemoryLayout.paddingLayout(1)
        ).withName("flash_data_req");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfByte chunk_idx$LAYOUT = (OfByte)$LAYOUT.select(groupElement("chunk_idx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t chunk_idx
         * }
         */
        public static final OfByte chunk_idx$layout() {
            return chunk_idx$LAYOUT;
        }

        private static final long chunk_idx$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t chunk_idx
         * }
         */
        public static final long chunk_idx$offset() {
            return chunk_idx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t chunk_idx
         * }
         */
        public static byte chunk_idx(MemorySegment struct) {
            return struct.get(chunk_idx$LAYOUT, chunk_idx$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t chunk_idx
         * }
         */
        public static void chunk_idx(MemorySegment struct, byte fieldValue) {
            struct.set(chunk_idx$LAYOUT, chunk_idx$OFFSET, fieldValue);
        }

        private static final OfByte crc$LAYOUT = (OfByte)$LAYOUT.select(groupElement("crc"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t crc
         * }
         */
        public static final OfByte crc$layout() {
            return crc$LAYOUT;
        }

        private static final long crc$OFFSET = 1;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t crc
         * }
         */
        public static final long crc$offset() {
            return crc$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t crc
         * }
         */
        public static byte crc(MemorySegment struct) {
            return struct.get(crc$LAYOUT, crc$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t crc
         * }
         */
        public static void crc(MemorySegment struct, byte fieldValue) {
            struct.set(crc$LAYOUT, crc$OFFSET, fieldValue);
        }

        private static final OfShort chunk_offset$LAYOUT = (OfShort)$LAYOUT.select(groupElement("chunk_offset"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint16_t chunk_offset
         * }
         */
        public static final OfShort chunk_offset$layout() {
            return chunk_offset$LAYOUT;
        }

        private static final long chunk_offset$OFFSET = 2;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint16_t chunk_offset
         * }
         */
        public static final long chunk_offset$offset() {
            return chunk_offset$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint16_t chunk_offset
         * }
         */
        public static short chunk_offset(MemorySegment struct) {
            return struct.get(chunk_offset$LAYOUT, chunk_offset$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint16_t chunk_offset
         * }
         */
        public static void chunk_offset(MemorySegment struct, short fieldValue) {
            struct.set(chunk_offset$LAYOUT, chunk_offset$OFFSET, fieldValue);
        }

        private static final OfByte chunk_size$LAYOUT = (OfByte)$LAYOUT.select(groupElement("chunk_size"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t chunk_size
         * }
         */
        public static final OfByte chunk_size$layout() {
            return chunk_size$LAYOUT;
        }

        private static final long chunk_size$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t chunk_size
         * }
         */
        public static final long chunk_size$offset() {
            return chunk_size$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t chunk_size
         * }
         */
        public static byte chunk_size(MemorySegment struct) {
            return struct.get(chunk_size$LAYOUT, chunk_size$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t chunk_size
         * }
         */
        public static void chunk_size(MemorySegment struct, byte fieldValue) {
            struct.set(chunk_size$LAYOUT, chunk_size$OFFSET, fieldValue);
        }

        private static final SequenceLayout chunk$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("chunk"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t chunk[16]
         * }
         */
        public static final SequenceLayout chunk$layout() {
            return chunk$LAYOUT;
        }

        private static final long chunk$OFFSET = 5;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t chunk[16]
         * }
         */
        public static final long chunk$offset() {
            return chunk$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t chunk[16]
         * }
         */
        public static MemorySegment chunk(MemorySegment struct) {
            return struct.asSlice(chunk$OFFSET, chunk$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t chunk[16]
         * }
         */
        public static void chunk(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, chunk$OFFSET, chunk$LAYOUT.byteSize());
        }

        private static long[] chunk$DIMS = { 16 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * uint8_t chunk[16]
         * }
         */
        public static long[] chunk$dimensions() {
            return chunk$DIMS;
        }
        private static final VarHandle chunk$ELEM_HANDLE = chunk$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * uint8_t chunk[16]
         * }
         */
        public static byte chunk(MemorySegment struct, long index0) {
            return (byte)chunk$ELEM_HANDLE.get(struct, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * uint8_t chunk[16]
         * }
         */
        public static void chunk(MemorySegment struct, long index0, byte fieldValue) {
            chunk$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout flash_data$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("flash_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct flash_data_req flash_data
     * }
     */
    public static final GroupLayout flash_data$layout() {
        return flash_data$LAYOUT;
    }

    private static final long flash_data$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct flash_data_req flash_data
     * }
     */
    public static final long flash_data$offset() {
        return flash_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct flash_data_req flash_data
     * }
     */
    public static MemorySegment flash_data(MemorySegment struct) {
        return struct.asSlice(flash_data$OFFSET, flash_data$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct flash_data_req flash_data
     * }
     */
    public static void flash_data(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flash_data$OFFSET, flash_data$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     * }
     * }
     */
    public static class flash_data_end {

        flash_data_end() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(

        ).withName("$anon$95:9");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout flash_data_end$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("flash_data_end"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     * } flash_data_end
     * }
     */
    public static final GroupLayout flash_data_end$layout() {
        return flash_data_end$LAYOUT;
    }

    private static final long flash_data_end$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     * } flash_data_end
     * }
     */
    public static final long flash_data_end$offset() {
        return flash_data_end$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     * } flash_data_end
     * }
     */
    public static MemorySegment flash_data_end(MemorySegment struct) {
        return struct.asSlice(flash_data_end$OFFSET, flash_data_end$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     * } flash_data_end
     * }
     */
    public static void flash_data_end(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flash_data_end$OFFSET, flash_data_end$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct cfg_shtdn_req {
     *     uint8_t node_id;
     *     bool shutdown;
     * }
     * }
     */
    public static class cfg_shtdn_req {

        cfg_shtdn_req() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            protocol_h.C_CHAR.withName("node_id"),
            protocol_h.C_BOOL.withName("shutdown")
        ).withName("cfg_shtdn_req");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfByte node_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("node_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static final OfByte node_id$layout() {
            return node_id$LAYOUT;
        }

        private static final long node_id$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static final long node_id$offset() {
            return node_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static byte node_id(MemorySegment struct) {
            return struct.get(node_id$LAYOUT, node_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static void node_id(MemorySegment struct, byte fieldValue) {
            struct.set(node_id$LAYOUT, node_id$OFFSET, fieldValue);
        }

        private static final OfBoolean shutdown$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("shutdown"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * bool shutdown
         * }
         */
        public static final OfBoolean shutdown$layout() {
            return shutdown$LAYOUT;
        }

        private static final long shutdown$OFFSET = 1;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * bool shutdown
         * }
         */
        public static final long shutdown$offset() {
            return shutdown$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * bool shutdown
         * }
         */
        public static boolean shutdown(MemorySegment struct) {
            return struct.get(shutdown$LAYOUT, shutdown$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * bool shutdown
         * }
         */
        public static void shutdown(MemorySegment struct, boolean fieldValue) {
            struct.set(shutdown$LAYOUT, shutdown$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout configure_shutdown$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("configure_shutdown"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cfg_shtdn_req configure_shutdown
     * }
     */
    public static final GroupLayout configure_shutdown$layout() {
        return configure_shutdown$LAYOUT;
    }

    private static final long configure_shutdown$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cfg_shtdn_req configure_shutdown
     * }
     */
    public static final long configure_shutdown$offset() {
        return configure_shutdown$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cfg_shtdn_req configure_shutdown
     * }
     */
    public static MemorySegment configure_shutdown(MemorySegment struct) {
        return struct.asSlice(configure_shutdown$OFFSET, configure_shutdown$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cfg_shtdn_req configure_shutdown
     * }
     */
    public static void configure_shutdown(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, configure_shutdown$OFFSET, configure_shutdown$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct cfg_engage_req {
     *     uint8_t node_id;
     *     bool engaged;
     * }
     * }
     */
    public static class cfg_engage_req {

        cfg_engage_req() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            protocol_h.C_CHAR.withName("node_id"),
            protocol_h.C_BOOL.withName("engaged")
        ).withName("cfg_engage_req");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfByte node_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("node_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static final OfByte node_id$layout() {
            return node_id$LAYOUT;
        }

        private static final long node_id$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static final long node_id$offset() {
            return node_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static byte node_id(MemorySegment struct) {
            return struct.get(node_id$LAYOUT, node_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static void node_id(MemorySegment struct, byte fieldValue) {
            struct.set(node_id$LAYOUT, node_id$OFFSET, fieldValue);
        }

        private static final OfBoolean engaged$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("engaged"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * bool engaged
         * }
         */
        public static final OfBoolean engaged$layout() {
            return engaged$LAYOUT;
        }

        private static final long engaged$OFFSET = 1;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * bool engaged
         * }
         */
        public static final long engaged$offset() {
            return engaged$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * bool engaged
         * }
         */
        public static boolean engaged(MemorySegment struct) {
            return struct.get(engaged$LAYOUT, engaged$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * bool engaged
         * }
         */
        public static void engaged(MemorySegment struct, boolean fieldValue) {
            struct.set(engaged$LAYOUT, engaged$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout configure_engagement$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("configure_engagement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cfg_engage_req configure_engagement
     * }
     */
    public static final GroupLayout configure_engagement$layout() {
        return configure_engagement$LAYOUT;
    }

    private static final long configure_engagement$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cfg_engage_req configure_engagement
     * }
     */
    public static final long configure_engagement$offset() {
        return configure_engagement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cfg_engage_req configure_engagement
     * }
     */
    public static MemorySegment configure_engagement(MemorySegment struct) {
        return struct.asSlice(configure_engagement$OFFSET, configure_engagement$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cfg_engage_req configure_engagement
     * }
     */
    public static void configure_engagement(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, configure_engagement$OFFSET, configure_engagement$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct scan_req {
     *     bool include_states;
     * }
     * }
     */
    public static class scan_req {

        scan_req() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            protocol_h.C_BOOL.withName("include_states")
        ).withName("scan_req");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfBoolean include_states$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("include_states"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * bool include_states
         * }
         */
        public static final OfBoolean include_states$layout() {
            return include_states$LAYOUT;
        }

        private static final long include_states$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * bool include_states
         * }
         */
        public static final long include_states$offset() {
            return include_states$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * bool include_states
         * }
         */
        public static boolean include_states(MemorySegment struct) {
            return struct.get(include_states$LAYOUT, include_states$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * bool include_states
         * }
         */
        public static void include_states(MemorySegment struct, boolean fieldValue) {
            struct.set(include_states$LAYOUT, include_states$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout scan$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("scan"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct scan_req scan
     * }
     */
    public static final GroupLayout scan$layout() {
        return scan$LAYOUT;
    }

    private static final long scan$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct scan_req scan
     * }
     */
    public static final long scan$offset() {
        return scan$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct scan_req scan
     * }
     */
    public static MemorySegment scan(MemorySegment struct) {
        return struct.asSlice(scan$OFFSET, scan$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct scan_req scan
     * }
     */
    public static void scan(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, scan$OFFSET, scan$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct node_state_req {
     *     uint8_t node_id;
     * }
     * }
     */
    public static class node_state_req {

        node_state_req() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            protocol_h.C_CHAR.withName("node_id")
        ).withName("node_state_req");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfByte node_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("node_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static final OfByte node_id$layout() {
            return node_id$LAYOUT;
        }

        private static final long node_id$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static final long node_id$offset() {
            return node_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static byte node_id(MemorySegment struct) {
            return struct.get(node_id$LAYOUT, node_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t node_id
         * }
         */
        public static void node_id(MemorySegment struct, byte fieldValue) {
            struct.set(node_id$LAYOUT, node_id$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout node_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("node_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct node_state_req node_state
     * }
     */
    public static final GroupLayout node_state$layout() {
        return node_state$LAYOUT;
    }

    private static final long node_state$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct node_state_req node_state
     * }
     */
    public static final long node_state$offset() {
        return node_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct node_state_req node_state
     * }
     */
    public static MemorySegment node_state(MemorySegment struct) {
        return struct.asSlice(node_state$OFFSET, node_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct node_state_req node_state
     * }
     */
    public static void node_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, node_state$OFFSET, node_state$LAYOUT.byteSize());
    }

    private static final GroupLayout set_node_info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$81:5"), groupElement("set_node_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct device_configuration set_node_info
     * }
     */
    public static final GroupLayout set_node_info$layout() {
        return set_node_info$LAYOUT;
    }

    private static final long set_node_info$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct device_configuration set_node_info
     * }
     */
    public static final long set_node_info$offset() {
        return set_node_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct device_configuration set_node_info
     * }
     */
    public static MemorySegment set_node_info(MemorySegment struct) {
        return struct.asSlice(set_node_info$OFFSET, set_node_info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct device_configuration set_node_info
     * }
     */
    public static void set_node_info(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, set_node_info$OFFSET, set_node_info$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

