// Generated by jextract

package foundation.oned6.dicegrid.comms;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct comms_message {
 *     mac_address_t sender;
 *     uint32_t data_size;
 *     uint8_t data[];
 * }
 * }
 */
class comms_message {

    comms_message() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(6, comms_h.C_CHAR).withName("sender"),
        comms_h.C_INT.withByteAlignment(1).withName("data_size"),
        MemoryLayout.sequenceLayout(0, comms_h.C_CHAR).withName("data")
    ).withName("comms_message");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout sender$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("sender"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mac_address_t sender
     * }
     */
    public static final SequenceLayout sender$layout() {
        return sender$LAYOUT;
    }

    private static final long sender$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mac_address_t sender
     * }
     */
    public static final long sender$offset() {
        return sender$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mac_address_t sender
     * }
     */
    public static MemorySegment sender(MemorySegment struct) {
        return struct.asSlice(sender$OFFSET, sender$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mac_address_t sender
     * }
     */
    public static void sender(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sender$OFFSET, sender$LAYOUT.byteSize());
    }

    private static final OfInt data_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("data_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t data_size
     * }
     */
    public static final OfInt data_size$layout() {
        return data_size$LAYOUT;
    }

    private static final long data_size$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t data_size
     * }
     */
    public static final long data_size$offset() {
        return data_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t data_size
     * }
     */
    public static int data_size(MemorySegment struct) {
        return struct.get(data_size$LAYOUT, data_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t data_size
     * }
     */
    public static void data_size(MemorySegment struct, int fieldValue) {
        struct.set(data_size$LAYOUT, data_size$OFFSET, fieldValue);
    }

    private static final SequenceLayout data$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t data[]
     * }
     */
    public static final SequenceLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t data[]
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t data[]
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.asSlice(data$OFFSET, data$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t data[]
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, data$OFFSET, data$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

