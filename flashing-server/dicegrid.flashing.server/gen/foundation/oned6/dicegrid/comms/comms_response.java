// Generated by jextract

package foundation.oned6.dicegrid.comms;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct comms_response {
 *     uint32_t total_size;
 *     uint16_t message_count;
 *     struct {
 *         mac_address_t sender;
 *         uint32_t message_size;
 *         uint8_t message[];
 *     } messages[];
 * }
 * }
 */
class comms_response {

    comms_response() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        comms_h.C_INT.withName("total_size"),
        comms_h.C_SHORT.withName("message_count"),
        MemoryLayout.paddingLayout(2),
        MemoryLayout.sequenceLayout(0, comms_response.messages.layout()).withName("messages")
    ).withName("comms_response");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt total_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("total_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t total_size
     * }
     */
    public static final OfInt total_size$layout() {
        return total_size$LAYOUT;
    }

    private static final long total_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t total_size
     * }
     */
    public static final long total_size$offset() {
        return total_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t total_size
     * }
     */
    public static int total_size(MemorySegment struct) {
        return struct.get(total_size$LAYOUT, total_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t total_size
     * }
     */
    public static void total_size(MemorySegment struct, int fieldValue) {
        struct.set(total_size$LAYOUT, total_size$OFFSET, fieldValue);
    }

    private static final OfShort message_count$LAYOUT = (OfShort)$LAYOUT.select(groupElement("message_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t message_count
     * }
     */
    public static final OfShort message_count$layout() {
        return message_count$LAYOUT;
    }

    private static final long message_count$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t message_count
     * }
     */
    public static final long message_count$offset() {
        return message_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t message_count
     * }
     */
    public static short message_count(MemorySegment struct) {
        return struct.get(message_count$LAYOUT, message_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t message_count
     * }
     */
    public static void message_count(MemorySegment struct, short fieldValue) {
        struct.set(message_count$LAYOUT, message_count$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     mac_address_t sender;
     *     uint32_t message_size;
     *     uint8_t message[];
     * }
     * }
     */
    public static class messages {

        messages() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(6, comms_h.C_CHAR).withName("sender"),
            MemoryLayout.paddingLayout(2),
            comms_h.C_INT.withName("message_size"),
            MemoryLayout.sequenceLayout(0, comms_h.C_CHAR).withName("message")
        ).withName("$anon$21:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final SequenceLayout sender$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("sender"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * mac_address_t sender
         * }
         */
        public static final SequenceLayout sender$layout() {
            return sender$LAYOUT;
        }

        private static final long sender$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * mac_address_t sender
         * }
         */
        public static final long sender$offset() {
            return sender$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * mac_address_t sender
         * }
         */
        public static MemorySegment sender(MemorySegment struct) {
            return struct.asSlice(sender$OFFSET, sender$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * mac_address_t sender
         * }
         */
        public static void sender(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, sender$OFFSET, sender$LAYOUT.byteSize());
        }

        private static final OfInt message_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("message_size"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint32_t message_size
         * }
         */
        public static final OfInt message_size$layout() {
            return message_size$LAYOUT;
        }

        private static final long message_size$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint32_t message_size
         * }
         */
        public static final long message_size$offset() {
            return message_size$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint32_t message_size
         * }
         */
        public static int message_size(MemorySegment struct) {
            return struct.get(message_size$LAYOUT, message_size$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint32_t message_size
         * }
         */
        public static void message_size(MemorySegment struct, int fieldValue) {
            struct.set(message_size$LAYOUT, message_size$OFFSET, fieldValue);
        }

        private static final SequenceLayout message$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("message"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t message[]
         * }
         */
        public static final SequenceLayout message$layout() {
            return message$LAYOUT;
        }

        private static final long message$OFFSET = 12;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t message[]
         * }
         */
        public static final long message$offset() {
            return message$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t message[]
         * }
         */
        public static MemorySegment message(MemorySegment struct) {
            return struct.asSlice(message$OFFSET, message$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t message[]
         * }
         */
        public static void message(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, message$OFFSET, message$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final SequenceLayout messages$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("messages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     mac_address_t sender;
     *     uint32_t message_size;
     *     uint8_t message[];
     * } messages[]
     * }
     */
    public static final SequenceLayout messages$layout() {
        return messages$LAYOUT;
    }

    private static final long messages$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     mac_address_t sender;
     *     uint32_t message_size;
     *     uint8_t message[];
     * } messages[]
     * }
     */
    public static final long messages$offset() {
        return messages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     mac_address_t sender;
     *     uint32_t message_size;
     *     uint8_t message[];
     * } messages[]
     * }
     */
    public static MemorySegment messages(MemorySegment struct) {
        return struct.asSlice(messages$OFFSET, messages$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     mac_address_t sender;
     *     uint32_t message_size;
     *     uint8_t message[];
     * } messages[]
     * }
     */
    public static void messages(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, messages$OFFSET, messages$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

